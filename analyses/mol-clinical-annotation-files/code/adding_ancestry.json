{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:54.932802Z",
     "iopub.status.busy": "2020-10-26T19:44:54.931698Z",
     "iopub.status.idle": "2020-10-26T19:44:54.934169Z",
     "shell.execute_reply": "2020-10-26T19:44:54.933700Z"
    },
    "papermill": {
     "duration": 0.011165,
     "end_time": "2020-10-26T19:44:54.934304",
     "exception": false,
     "start_time": "2020-10-26T19:44:54.923139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "deconstructSigs_features_file = \"stats/Distance_spearman_finalLinkage_average_clusterAlg_HC/cohort3a/cluster_membership/deconstructSigs_cosmic2019_per_participant.tsv\"\n",
    "clusters_file = \"stats/Distance_spearman_finalLinkage_average_clusterAlg_HC/cohort3a/cluster_membership/cluster_CC_PCA_HCPC_clinical.txt\"\n",
    "output_folder = \"stats/Distance_spearman_finalLinkage_average_clusterAlg_HC/cohort3a/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:54.948553Z",
     "iopub.status.busy": "2020-10-26T19:44:54.947804Z",
     "iopub.status.idle": "2020-10-26T19:44:55.733081Z",
     "shell.execute_reply": "2020-10-26T19:44:55.732657Z"
    },
    "papermill": {
     "duration": 0.793105,
     "end_time": "2020-10-26T19:44:55.733196",
     "exception": false,
     "start_time": "2020-10-26T19:44:54.940091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.747062Z",
     "iopub.status.busy": "2020-10-26T19:44:55.746345Z",
     "iopub.status.idle": "2020-10-26T19:44:55.753101Z",
     "shell.execute_reply": "2020-10-26T19:44:55.753522Z"
    },
    "papermill": {
     "duration": 0.016331,
     "end_time": "2020-10-26T19:44:55.753646",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.737315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This file has all the samples that have ancestry information (only ones that have germline VCF files)\n",
    "ancestry_file = pd.read_csv(\"ancestry_check/output/CBTTC_and_PNOC003.txt\", sep=\"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.768508Z",
     "iopub.status.busy": "2020-10-26T19:44:55.767931Z",
     "iopub.status.idle": "2020-10-26T19:44:55.770291Z",
     "shell.execute_reply": "2020-10-26T19:44:55.770818Z"
    },
    "papermill": {
     "duration": 0.012565,
     "end_time": "2020-10-26T19:44:55.770989",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.758424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# removing row 35 with \"ancestry\" \\t \"case_id\"\n",
    "ancestry_file = ancestry_file[ancestry_file['ancestry'] != 'ancestry']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.785156Z",
     "iopub.status.busy": "2020-10-26T19:44:55.784655Z",
     "iopub.status.idle": "2020-10-26T19:44:55.786889Z",
     "shell.execute_reply": "2020-10-26T19:44:55.787395Z"
    },
    "papermill": {
     "duration": 0.010321,
     "end_time": "2020-10-26T19:44:55.787517",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.777196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Renaming column to cohort_participant_id so we can use merge with annotation files\n",
    "ancestry_file = ancestry_file.rename(columns={\"case_id\": \"cohort_participant_id\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.799899Z",
     "iopub.status.busy": "2020-10-26T19:44:55.799378Z",
     "iopub.status.idle": "2020-10-26T19:44:55.831656Z",
     "shell.execute_reply": "2020-10-26T19:44:55.832043Z"
    },
    "papermill": {
     "duration": 0.039899,
     "end_time": "2020-10-26T19:44:55.832170",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.792271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "annot1 = pd.read_csv(\"output/annotation_files/pbta_test_histology_annotation.tsv\", sep=\"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.846325Z",
     "iopub.status.busy": "2020-10-26T19:44:55.845806Z",
     "iopub.status.idle": "2020-10-26T19:44:55.849369Z",
     "shell.execute_reply": "2020-10-26T19:44:55.849748Z"
    },
    "papermill": {
     "duration": 0.013195,
     "end_time": "2020-10-26T19:44:55.849883",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.836688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This fucntio will take annotation and ancestry file with \"cohort_participant_id\" and merge those\n",
    "# Sin ce we are doing an outer merge, any sample with no ancestry will have \"NA\" as value \n",
    "# If peddy was not able to determine population, value will be \"UNKNOWN\"\n",
    "# It will also remove PNOC008 samples \n",
    "def merge_ancestry_and_annotation(ancestry_df, annotation_df):\n",
    "    merged_df = pd.merge(ancestry_df, annotation_df, on=[\n",
    "    'cohort_participant_id'], how=\"outer\").fillna(\"NA\")\n",
    "    merged_df = merged_df[merged_df[\"cohort\"]  != \"PNOC008\"]\n",
    "    return(merged_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.864572Z",
     "iopub.status.busy": "2020-10-26T19:44:55.863854Z",
     "iopub.status.idle": "2020-10-26T19:44:55.908375Z",
     "shell.execute_reply": "2020-10-26T19:44:55.908779Z"
    },
    "papermill": {
     "duration": 0.053617,
     "end_time": "2020-10-26T19:44:55.908915",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.855298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create new annotation files with ancestry and no PNOC008 samples \n",
    "annot1_out = merge_ancestry_and_annotation(ancestry_file, annot1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-26T19:44:55.921181Z",
     "iopub.status.busy": "2020-10-26T19:44:55.920651Z",
     "iopub.status.idle": "2020-10-26T19:44:55.974607Z",
     "shell.execute_reply": "2020-10-26T19:44:55.974109Z"
    },
    "papermill": {
     "duration": 0.061553,
     "end_time": "2020-10-26T19:44:55.974725",
     "exception": false,
     "start_time": "2020-10-26T19:44:55.913172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "annot1_out.to_csv(\"output/annotation_files/hgat_all_primary_TP53_SNV_CNV_consensus.tsv\", sep=\"\\t\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "papermill": {
   "duration": 3.272707,
   "end_time": "2020-10-26T19:44:57.240219",
   "environment_variables": {},
   "exception": null,
   "input_path": "code/06_adding_ancestry.ipynb",
   "output_path": "code/adding_ancestry.json",
   "parameters": {},
   "start_time": "2020-10-26T19:44:53.967512",
   "version": "2.1.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}